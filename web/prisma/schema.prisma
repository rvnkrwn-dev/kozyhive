// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  username      String
  full_name     String
  email         String         @unique
  password      String
  image_url     String?
  role          Role
  user_status   UserStatus
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  refresh_token RefreshToken[]
  log           Log[]
}

enum Role {
  ADMIN
  USER
  OWNER
}

enum UserStatus {
  PENDING
  ACTIVE
  INACTIVE
}

model RefreshToken {
  id            Int      @id @default(autoincrement())
  user_id       Int
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  refresh_token String   @db.VarChar(1024)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}

model Log {
  id          Int      @id @default(autoincrement())
  user_id     Int
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  action      String
  description String   @db.Text
  created_at  DateTime @default(now())
}

enum Action {
  Masuk
  Keluar
  Tambah
  Perbarui
  Hapus
  Reset
}

model Address {
  id            Int    @id @default(autoincrement())
  street_name   String
  street_number String
  village_name  String
  city          String
  state         String
  zip           String
  longitude     String
  latitude      String
  kost          Kost   @relation(fields: [kostId], references: [id])
  kostId        Int    @unique
}

model Kost {
  id                 Int                @id @default(autoincrement())
  slug               String             @unique
  title              String
  price              Float              @map("price")
  type               Kost_type
  ratings            Float              @map("ratings")
  pengaturan_khusus  String?
  address            Address[]
  addressId          Int                @unique
  facilitiesRoom     FacilitiesRoom[]
  facilitiesRoomId   Int                @unique
  facilitiesToilet   FacilitiesToilet[]
  facilitiesToiletId Int                @unique
  photos             Photo[]
  wishlists          Wishlist[]
  ulasan             Ulasan[]
  owner              User               @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId            Int
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

model FacilitiesRoom {
  id     Int     @id @default(autoincrement())
  ac     Boolean
  meja   Boolean
  lemari Boolean
  kursi  Boolean
  wifi   Boolean
  kostId Int     @unique
  kost   Kost    @relation(fields: [kostId], references: [id])
}

model FacilitiesToilet {
  id          Int         @id @default(autoincrement())
  kamar_mandi Kamar_mandi
  shower      Boolean
  kloset      Kloset_type
  air_panas   Boolean
  kostId      Int         @unique
  kost        Kost        @relation(fields: [kostId], references: [id])
}

model Wishlist {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int
  kost   Kost @relation(fields: [kostId], references: [id])
  kostId Int

  @@unique([userId, kostId])
}

model Photo {
  id          Int      @id @default(autoincrement())
  image_url   String
  description String?
  kost        Kost?    @relation(fields: [kostId], references: [id])
  kostId      Int?
  ulasan      Ulasan[]
  ulasanId    Int?
  createdAt   DateTime @default(now())
}

model Ulasan {
  id       Int    @id @default(autoincrement())
  userId   Int
  user     User   @relation(fields: [userId], references: [id])
  rate     Int
  comments String
  photosId Int
  photos   Photo? @relation(fields: [photosId], references: [id])
  Kost     Kost?  @relation(fields: [kostId], references: [id])
  kostId   Int?
}
