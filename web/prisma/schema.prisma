// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  username      String
  full_name     String
  email         String         @unique
  password      String
  image_url     String?
  role          Role
  user_status   UserStatus
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  refresh_token RefreshToken[]
  log           Log[]
  kost          Kost[]
  whishlist     Wishlist[]
  ulasan        Ulasan[]
}

enum Role {
  ADMIN
  USER
  OWNER
}

enum UserStatus {
  PENDING
  ACTIVE
  INACTIVE
}

model RefreshToken {
  id            Int      @id @default(autoincrement())
  user_id       Int
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  refresh_token String   @db.VarChar(1024)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}

model Log {
  id          Int      @id @default(autoincrement())
  user_id     Int
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  action      String
  description String   @db.Text
  created_at  DateTime @default(now())
}

enum Action {
  Masuk
  Keluar
  Tambah
  Perbarui
  Hapus
  Reset
}

model Address {
  id            Int    @id @default(autoincrement())
  street_name   String
  street_number String
  village_name  String
  city          String
  state         String
  zip           String
  longitude     String
  latitude      String
  kost          Kost   @relation(fields: [kost_id], references: [id])
  kost_id       Int
}

model Kost {
  id                Int                @id @default(autoincrement())
  slug              String             @unique
  title             String
  price             Float
  type              Kost_type
  ratings           Float
  pengaturan_khusus String?
  address           Address[]
  facilitiesRoom    FacilitiesRoom[]
  facilitiesToilet  FacilitiesToilet[]
  photos            Photo[]
  wishlists         Wishlist[]
  ulasan            Ulasan[]
  owner             User               @relation(fields: [owner_id], references: [id], onDelete: Cascade)
  owner_id          Int
  created_at        DateTime           @default(now())
  updated_at        DateTime           @updatedAt
}

enum Kost_type {
  PUTRA
  PUTRI
  CAMPUR
}

enum Kamar_mandi {
  NULL
  DALAM
  LUAR
}

enum Kloset_type {
  NULL
  DUDUK
  JONGKOK
}

model FacilitiesRoom {
  id         Int      @id @default(autoincrement())
  ac         Boolean
  meja       Boolean
  lemari     Boolean
  kursi      Boolean
  wifi       Boolean
  kost_id    Int
  kost       Kost     @relation(fields: [kost_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model FacilitiesToilet {
  id          Int         @id @default(autoincrement())
  kamar_mandi Kamar_mandi
  shower      Boolean
  kloset      Kloset_type
  air_panas   Boolean
  kost_id     Int         @unique
  kost        Kost        @relation(fields: [kost_id], references: [id])
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt
}

model Wishlist {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [user_id], references: [id])
  user_id    Int
  kost       Kost     @relation(fields: [kost_id], references: [id])
  kost_id    Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Photo {
  id          Int      @id @default(autoincrement())
  image_url   String
  description String?
  kost        Kost?    @relation(fields: [kost_id], references: [id])
  kost_id     Int?
  ulasan      Ulasan?  @relation(fields: [ulasan_id], references: [id])
  ulasan_id   Int?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model Ulasan {
  id        Int     @id @default(autoincrement())
  user_id   Int
  user      User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  rate      Int
  comments  String
  photos_id Int
  Kost      Kost?   @relation(fields: [kost_id], references: [id])
  kost_id   Int?
  photo     Photo[]
}
